// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Component {
  id          String   @id @default(uuid())
  name        String   @unique
  type        ComponentType
  code        String   @db.Text
  previewContent String? @db.Text
  propsSchema Json
  examples    String?  @db.Text
  description String?  @db.Text
  tags        String[]
  metadata    Json?
  version     String   @default("1.0.0")
  
  // Relationships
  ownerId     String?
  owner       User?    @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  
  // Reverse relations
  generationLogs      GenerationLog[]
  accessibilityReports AccessibilityReport[]
  
  // Audit fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Analytics
  usageCount  Int      @default(0)
  lastUsedAt  DateTime?
  
  @@map("components")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // For credentials provider
  role          UserRole  @default(USER)
  
  // NextAuth relationships
  accounts      Account[]
  sessions      Session[]
  
  // App relationships
  components    Component[]
  
  // Audit fields
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model GenerationLog {
  id             String            @id @default(uuid())
  prompt         String            @db.Text
  componentType  String
  requirements   String?           @db.Text
  options        String?           @db.Text
  status         GenerationStatus
  result         String?           @db.Text
  error          String?           @db.Text
  retryCount     Int               @default(0)
  metadata       String?           @db.Text
  
  // Timing fields
  createdAt      DateTime          @default(now())
  startedAt      DateTime?
  completedAt    DateTime?
  
  // Optional component relationship
  componentId    String?
  component      Component?        @relation(fields: [componentId], references: [id], onDelete: SetNull)
  
  // Optional user relationship
  userId         String?
  
  @@map("generation_logs")
}

model AccessibilityReport {
  id          String    @id @default(uuid())
  componentId String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  
  // axe-core results
  violations  Json      // Critical issues
  incomplete  Json      // Needs review
  passes      Json      // Passed tests
  
  score       Float?    // Overall accessibility score
  
  createdAt   DateTime  @default(now())
  
  @@map("accessibility_reports")
}

enum ComponentType {
  MUITable
  MUIButton
  MUIForm
  MUIDialog
  MUICard
  MUITabs
  MUIList
  MUIChip
  MUIAvatar
  MUIBadge
  MUITooltip
  MUIMenu
  MUIDrawer
  MUIAppBar
  MUIBottomNavigation
  MUIBreadcrumbs
  MUIFab
  MUISpeedDial
  MUIStepper
  MUITimeline
  MUIAlert
  MUISnackbar
  MUIBackdrop
  MUISkeleton
  MUIProgress
  MUIRating
  MUISlider
  MUISwitch
  MUIToggleButton
  MUIAutocomplete
  MUIDatePicker
  MUITimePicker
  Custom
}

enum UserRole {
  USER
  ADMIN
  DEVELOPER
}

enum GenerationStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  PARTIAL
  TIMEOUT
  RATE_LIMITED
}
